const express = require('express');
//validator
//expressValidator.check();
const { check,validationResult } = require('express-validator');

const usersRepo = require('../../repositories/users');
const signupTemplate = require('../../views/admin/auth/signup');
const signinTemplate = require('../../views/admin/auth/signin');
//create sub router
// router = app 
const router = express.Router();



router.get('/signup', (req, res) => {
    res.send(signupTemplate({req}));
  });

router.post('/signup',[
  check('email')
    .trim()
    .normalizeEmail()
    .isEmail()
    .withMessage('Must be a valid email.')
    .custom(async email=>{
      const existingUser = await usersRepo.getOneBy({email});
      if(existingUser){
        throw new Error('Email in use.Please Change another one.');
      }
    }),
  check('password')
    .trim()
    .isLength({min:4,max:20})
    .withMessage('Must be between 4 and 20 characters.'),
  check('passwordConfirmation')
    .trim()
    .isLength({min:4,max:20})
    .withMessage('Must be between 4 and 20 characters.')
    .custom(async (passwordConfirmation,{ req } )=>{
        if(req.body.password !== passwordConfirmation){
          throw new Error('Password must match.');
        }
    })
],
async (req, res) => {
    //console.log(req.body);
    
    const errors = validationResult(req);
    console.log(errors);

    const {email,password,passwordConfirmation} = req.body;
    //console.log(passwordConfirmation);

    // const existingUser = await usersRepo.getOneBy({email});
    // if(existingUser){
    //   return res.send('Email in use.');
    // }
  
    // if(password !== passwordConfirmation){
    //   return res.send('Password must match.');
    // }
  
    //Create a user
    const user = await usersRepo.create({email,password});
    //Store the id that user inside the users cookie
    req.session.userId = user.id; //Added by cookie session
    res.send('Account created!!!');
  });
  
  router.get('/signout',(req,res)=>{
    req.session = null;
    res.send('You are logged out.');
  });
  
  
router.get('/signin',(req,res)=>{
    res.send(signinTemplate());
  });
  
router.post('/signin',async (req,res)=>{
    const {email,password} = req.body;
    const user = await usersRepo.getOneBy({email});
  
    if(!user){
      return res.send('Email not found');
    }
  
  
    const validPassword = await usersRepo.comparePasswords(user.password,password);
    if(!validPassword){
      return res.send('Invalid password.');
    }
    //return session
    req.session.userId = user.id;
  
    res.send('You are signed in');
});

module.exports = router;
  